css:
  * {
    box-sizing: border-box;
  }

  [v-cloak] > * { display:none; }

  body {
    margin: 0;
    padding: 0;
  }

  h1 {
    font-size: 2em;
  }

  .board-container {
    position: relative;
    margin: 10px auto 0 auto;
    width: calc(70vh / 6 * 7);
  }

  .board {
    position: relative;
    cursor: pointer;
    margin-top: 1em;
    border: solid 5px #333;
    width: calc(70vh / 6 * 7);
    height: calc(70vh);
    display: flex;
    flex-direction: row;
  }

  .board.red { border-color: red; }
  .board.yellow { border-color: yellow; }

  .shadow {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background-color: rgba(0, 0, 0, .8);
    color: white;
    font-size: 1.5em;
    padding: 1em;
    text-align: center;
    z-index: 1000;
  }

  .col {
    display: flex;
    flex-direction: column-reverse;
    width: calc(100% / 7);
    background-color: #ccc;
  }

  .col:hover {
    background-color: #aaa;
  }

  .chip {
    width: 100%;
    height: calc(100% / 6);
    border-radius: calc(100% / 2);
  }

  .red { color: white; background-color: red; }
  .yellow { color: black; background-color: yellow; }
  .g1 { background-color: #ccc; }
  .g2 { background-color: #ddd; }

#game.board-container (v-cloak)
  h1 Connect Four
  select v-model.number="game_mode"
    option value="0" Player vs Player
    option value="1" Player vs Easy AI
    option value="3" Player vs Moderate AI
    option value="4" Player vs Hard AI
  div :class="boardClass()"
    .shadow v-if="game_over === true" @click="startOver()"
      h1 Game Over
      p v-if="winner === 0"
        | There is no winner. You both played well!
      p.red v-if="winner === 1" RED wins this one! Sorry yellow...
      p.yellow v-if="winner === 2" YELLOW wins this one! Next time red...
      p Click to play again.
    .col.g1 @click="makeMove(1)"
      template v-for="chip in getChips(1)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g2 @click="makeMove(2)"
      template v-for="chip in getChips(2)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g1 @click="makeMove(3)"
      template v-for="chip in getChips(3)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g2 @click="makeMove(4)"
      template v-for="chip in getChips(4)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g1 @click="makeMove(5)"
      template v-for="chip in getChips(5)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g2 @click="makeMove(6)"
      template v-for="chip in getChips(6)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"
    .col.g1 @click="makeMove(7)"
      template v-for="chip in getChips(7)"
        .chip.red v-if="chip === 1"
        .chip.yellow v-if="chip === 2"

javascript:
  new Vue({
    el: '#game',

    data: {
      token: "#{form_authenticity_token}",
      width: 7,
      height: 6,
      game_mode: 0,
      game_over: false,
      moves: [],
      winner: null,
      turn: 1,
      colCount: [0, 0, 0, 0, 0, 0]
    },

    created: function() {},

    methods: {
      getChips: function(slot) {
        var playerOne = true
        var out = []

        this.moves.forEach(function(play) {
          if(play == slot && playerOne) {
            out.push(1)
          } else if(play == slot && !playerOne) {
            out.push(2)
          }
          playerOne = !playerOne
        })

        return out
      },

      makeMove: function(slot) {
        var count = this.colCount[slot - 1]
        if(count >= 6) return
        this.colCount[slot - 1] += 1
        this.submitMove(slot)
      },

      submitMove: function(slot) {
        var that = this
        this.moves.push(slot)

        if(this.turn === 1) {
          this.turn = 2
        } else {
          this.turn = 1
        }

        postData('/move', {
          width: this.width,
          height: this.height,
          game_mode: this.game_mode,
          moves: this.moves
        }, this.token).then(function(data){
          console.log('server response', data)
          // empty and re-full moves
          that.moves.splice(0, that.moves.length)
          data.moves.forEach(function(m){ that.moves.push(m) })

          // set winner and game over
          that.winner = data.winner
          that.game_over = data.game_over
        })
      },

      startOver: function() {
        var that = this
        this.moves.splice(0, this.moves.length)
        this.game_over = false
        this.winner = null
        this.turn = 1
        this.colCount.forEach(function(val, index){that.colCount[index] = 0})
      },

      boardClass: function() {
        if(this.turn === 1) {
          return { 'board red': true}
        } else {
          return { 'board yellow': true}
        }
      }
    }
  })

  function postData(url, data, token) {
    return fetch(url, {
      body: JSON.stringify(data), // must match 'Content-Type' header
      cache: 'no-cache', // *default, cache, reload, force-cache, only-if-cached
      credentials: 'same-origin', // include, *omit
      headers: {
        'content-type': 'application/json',
        'X-CSRF-Token': token
      },
      method: 'POST', // *GET, PUT, DELETE, etc.
      mode: 'cors', // no-cors, *same-origin
      redirect: 'follow', // *manual, error
      referrer: 'no-referrer', // *client
    })
    .then(response => response.json()) // parses response to JSON
  }
